-- Setup script for RDF to Snowflake Semantic Views Demo
-- This script sets up the environment and creates the necessary Python UDFs
-- Includes MFA token caching configuration for improved user experience

-- Enable MFA token caching to reduce authentication prompts during demo
-- This improves user experience by caching MFA tokens for up to 4 hours
ALTER ACCOUNT SET ALLOW_CLIENT_MFA_CACHING = TRUE;

-- Set up the database and schema
CREATE DATABASE IF NOT EXISTS RDF_SEMANTIC_DB;
USE DATABASE RDF_SEMANTIC_DB;

CREATE SCHEMA IF NOT EXISTS SEMANTIC_VIEWS;
USE SCHEMA SEMANTIC_VIEWS;

-- Create and use warehouse for UDF processing
CREATE WAREHOUSE IF NOT EXISTS RDF_DEMO_WH
WITH WAREHOUSE_SIZE = 'SMALL'
     AUTO_SUSPEND = 60
     AUTO_RESUME = TRUE
     INITIALLY_SUSPENDED = FALSE;
USE WAREHOUSE RDF_DEMO_WH;

-- Create a table to store RDF schema files
CREATE OR REPLACE TABLE RDF_SCHEMAS (
    SCHEMA_ID VARCHAR(100) NOT NULL,
    SCHEMA_NAME VARCHAR(255) NOT NULL,
    RDF_FORMAT VARCHAR(50) NOT NULL,
    RDF_CONTENT TEXT NOT NULL,
    UPLOADED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP,
    DESCRIPTION TEXT,
    PRIMARY KEY (SCHEMA_ID)
);

-- Create a table to store conversion results
CREATE OR REPLACE TABLE CONVERSION_RESULTS (
    CONVERSION_ID VARCHAR(100) NOT NULL,
    SCHEMA_ID VARCHAR(100) NOT NULL,
    CONVERSION_TYPE VARCHAR(50) NOT NULL, -- 'SCHEMA_PARSE', 'DDL_GENERATION', 'DATA_LOAD'
    RESULT_DATA VARIANT,
    STATUS VARCHAR(20) DEFAULT 'SUCCESS', -- 'SUCCESS', 'ERROR', 'WARNING'
    ERROR_MESSAGE TEXT,
    CREATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (CONVERSION_ID),
    FOREIGN KEY (SCHEMA_ID) REFERENCES RDF_SCHEMAS(SCHEMA_ID)
);

-- Create a metadata table for tracking semantic views
CREATE OR REPLACE TABLE SEMANTIC_VIEW_METADATA (
    VIEW_ID VARCHAR(100) NOT NULL,
    VIEW_NAME VARCHAR(255) NOT NULL,
    VIEW_TYPE VARCHAR(50) NOT NULL, -- 'CLASS_VIEW', 'RELATIONSHIP_VIEW', 'HIERARCHY_VIEW'
    SOURCE_RDF_CLASS VARCHAR(1000),
    BASE_TABLE VARCHAR(255),
    PROPERTIES VARIANT,
    CREATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (VIEW_ID)
);

-- Create a table for storing data loading statistics
CREATE OR REPLACE TABLE DATA_LOAD_STATS (
    LOAD_ID VARCHAR(100) NOT NULL,
    SCHEMA_ID VARCHAR(100) NOT NULL,
    TABLE_NAME VARCHAR(255) NOT NULL,
    RECORDS_LOADED NUMBER(38,0) DEFAULT 0,
    LOAD_STATUS VARCHAR(20) DEFAULT 'PENDING',
    LOAD_START_TIME TIMESTAMP_NTZ,
    LOAD_END_TIME TIMESTAMP_NTZ,
    ERROR_MESSAGE TEXT,
    PRIMARY KEY (LOAD_ID),
    FOREIGN KEY (SCHEMA_ID) REFERENCES RDF_SCHEMAS(SCHEMA_ID)
);

-- Create utility views for monitoring
CREATE OR REPLACE VIEW VW_CONVERSION_SUMMARY AS
SELECT 
    rs.SCHEMA_NAME,
    rs.RDF_FORMAT,
    rs.UPLOADED_AT,
    COUNT(DISTINCT cr.CONVERSION_ID) as TOTAL_CONVERSIONS,
    SUM(CASE WHEN cr.STATUS = 'SUCCESS' THEN 1 ELSE 0 END) as SUCCESSFUL_CONVERSIONS,
    SUM(CASE WHEN cr.STATUS = 'ERROR' THEN 1 ELSE 0 END) as FAILED_CONVERSIONS,
    MAX(cr.CREATED_AT) as LAST_CONVERSION_TIME
FROM RDF_SCHEMAS rs
LEFT JOIN CONVERSION_RESULTS cr ON rs.SCHEMA_ID = cr.SCHEMA_ID
GROUP BY rs.SCHEMA_ID, rs.SCHEMA_NAME, rs.RDF_FORMAT, rs.UPLOADED_AT;

CREATE OR REPLACE VIEW VW_SEMANTIC_MODEL_OVERVIEW AS
SELECT 
    VIEW_TYPE,
    COUNT(*) as VIEW_COUNT,
    LISTAGG(VIEW_NAME, ', ') WITHIN GROUP (ORDER BY VIEW_NAME) as VIEW_NAMES
FROM SEMANTIC_VIEW_METADATA
GROUP BY VIEW_TYPE;

-- Helper function to generate unique IDs
CREATE OR REPLACE FUNCTION GENERATE_ID(prefix VARCHAR)
RETURNS VARCHAR
LANGUAGE SQL
AS
$$
    SELECT prefix || '_' || REPLACE(UUID_STRING(), '-', '')
$$;

-- Test the setup
SELECT 'RDF to Snowflake Semantic Views environment setup completed successfully!' as STATUS,
       'MFA token caching enabled - reduced authentication prompts for 4 hours' as MFA_STATUS;

-- Display current database and schema context
SELECT 
    CURRENT_DATABASE() as DATABASE_NAME,
    CURRENT_SCHEMA() as SCHEMA_NAME,
    CURRENT_TIMESTAMP() as SETUP_TIME;